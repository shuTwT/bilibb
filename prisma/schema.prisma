// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

// 系统部门
model SysDept {
    deptId     Int       @id @default(autoincrement()) //部门id
    parentId   Int       @default(0) //父部门id
    ancestors  String    @default("") //祖级列表
    deptName   String    @default("") //部门名称
    sort       Int       @default(0) //显示顺序
    type       Int       @default(1) //1公司2分公司3部门
    leader     String? //负责人
    phone      String? //联系电话
    email      String? //邮箱
    status     Int       @default(1) //部门状态 (1正常 0禁用)
    delFlag    Boolean   @default(false) //删除状态(false存在 true删除)
    createBy   String    @default("") //创建者
    createTime String? // 创建时间
    updateBy   String    @default("") //更新者
    updateTime String? //更新时间
    remark     String    @default("") //备注
    SysUser    SysUser[]
}

//系统用户
model SysUser {
    userId        Int       @id @default(autoincrement()) //用户ID
    deptId        Int? //部门ID
    userName      String //用户账号
    nickName      String //用户昵称
    userType      String    @default("00") //用户类型 (00系统用户)
    email         String    @default("") //用户邮箱
    phonenumber   String    @default("") //手机号码
    sex           Int       @default(0) //用户性别(0未知1男2女)
    avatar        String    @default("") //头像地址
    password      String    @default("") //密码
    loginIp       String    @default("") //最后登录的IP
    loginDate     String? //最后登录时间
    status        Int       @default(1) //用户状态 (1正常 0禁用)
    delFlag       Boolean   @default(false) //删除状态(false存在 true删除)
    createBy      String    @default("") //创建者
    createTime    String? // 创建时间
    updateBy      String    @default("") //更新者
    updateTime    String? //更新时间
    remark        String? //备注
    posts         SysPost[]
    dept          SysDept   @relation(fields: [sysDeptDeptId], references: [deptId])
    sysDeptDeptId Int       @default(100)
}

//系统岗位
model SysPost {
    postId     Int     @id @default(autoincrement()) //岗位ID
    postCode   String //岗位编码
    postName   String //岗位名称
    postSort   Int //显示顺序
    status     Int     @default(1) //岗位状态 (1正常 0禁用)
    delFlag    Boolean @default(false) //删除状态(false存在 true删除)
    createBy   String  @default("") //创建者
    createTime String? // 创建时间
    updateBy   String  @default("") //更新者
    updateTime String? //更新时间
    remark     String? //备注
    user       SysUser @relation(fields: [postId], references: [userId])
}

//系统角色
model SysRole {
    roleId            Int     @id @default(autoincrement()) //角色ID
    roleName          String //角色名称
    roleKey           String //角色权限字符串
    roleSort          Int //显示顺序
    dataScope         String  @default("1") //数据范围(1全部数据2自定义数据3本部门数据4本部门及以下数据)
    menuCheckStrictly Boolean @default(true) //菜单树选择项是否关联显示
    deptCheckStrictly Boolean @default(true) //部门数选择项是否关联显示
    status            Int     @default(1) //角色状态 (1正常 0禁用)
    delFlag           Boolean @default(false) //删除状态(false存在 true删除)
    createBy          String  @default("") //创建者
    createTime        String? // 创建时间
    updateBy          String  @default("") //更新者
    updateTime        String? //更新时间
    remark            String? //备注
}

//系统菜单
model SysMenu {
    menuId          Int     @id @default(autoincrement()) //菜单ID
    parentId        Int     @default(0) //父菜单ID
    menuType        Int     @default(0) //菜单类型(0菜单1iframe2外链3按钮)
    title           String  @default("") //标题
    menuName        String //菜单名称
    path            String  @default("") //路由地址
    component       String //组件路径
    rank            Int?    @default(0) //显示顺序
    redirect        String  @default("") //重定向
    icon            String  @default("") //菜单图标
    extraIcon       String  @default("") //右侧图标
    enterTransition String  @default("") //入场动画
    leaveTransition String  @default("") //出场动画
    activePath      String  @default("")
    auths           String  @default("")
    frameSrc        String  @default("")
    frameLoading    Boolean @default(true)
    keepAlive       Boolean @default(false)
    hiddenTag       Boolean @default(false)
    showLink        Boolean @default(true)
    showParent      Boolean @default(false)
    status          Int     @default(1) //菜单状态 (1正常 0禁用)
    createBy        String  @default("") //创建者
    createTime      String? // 创建时间
    updateBy        String  @default("") //更新者
    updateTime      String? //更新时间
    remark          String? //备注
}

// 系统角色菜单关联表
model SysRoleMenu {
    roleId Int
    menuId Int

    @@id([roleId, menuId])
}

//系统操作日志
model SysOperLog {
    operId        Int    @id @default(autoincrement())
    title         String @default("") //模块标题
    method        String @default("") //业务方法
    requestMethod String @default("") //请求方式
    operName      String @default("") //操作人员
    operUrl       String @default("") //请求URL
    operIp        String @default("") //主机IP
    status        Int    @default(0) //操作状态(0正常1异常)
}

//系统字典类型
model SysDictType {
    dictId     Int     @id @default(autoincrement()) //字典主键
    dictName   String  @default("") //字典名称
    dictType   String  @unique @default("") //字典类型
    status     String     @default("0") //状态(0正常,1停用)
    createBy   String  @default("") //创建者
    createTime String? // 创建时间
    updateBy   String  @default("") //更新者
    updateTime String? //更新时间
    remark     String? //备注
}

//系统字典数据表
model SysDictData {
    dictCode   Int  @id @default(autoincrement()) //字典编码
    dictSort   Int     @default(0) //字典排序
    dictLabel  String  @default("") //字典标签
    dictValue  String  @default("") //字典键值
    dictType   String  @default("") //字典类型
    status     String     @default("0") //状态(0正常,1停用)
    createBy   String  @default("") //创建者
    createTime String? // 创建时间
    updateBy   String  @default("") //更新者
    updateTime String? //更新时间
    remark     String? //备注
}

//系统参数配置
model SysConfig {
    configId    Int     @id @default(autoincrement()) //参数主键
    configName  String  @default("") //参数名称
    configKey   String  @default("") //参数键
    configValue String  @default("") //参数值
    configType  String  @default("") //参数类型
    createBy    String  @default("") //创建者
    createTime  String? // 创建时间
    updateBy    String  @default("") //更新者
    updateTime  String? //更新时间
    remark      String? //备注
}

//系统访问记录
model SysLogininfor {
    infoId        Int @id @default(autoincrement()) //访问ID
    userName      String @default("") //用户账号
    ipaddr        String @default("") //登录IP地址
    loginLocation String @default("") //登录地点
    browser       String @default("") //浏览器类型
    os            String @default("") //操作系统
    status        Int    @default(1) //登录状态(1成功0失败)
    msg           String @default("") //提示消息
    loginTime     String @default("") //访问时间
}

//系统通知公告
model SysNotice {
    noticeId      Int     @id @default(autoincrement()) //公告ID
    noticeTitle   String //公告标题
    noticeType    String //公告类型(1公告2公告)
    noticeContent String //公告内容
    noticeReaded  String  @default("0") //是否已读(0未读1已读)
    status        String  @default("0") //公告状态(0正常1关闭)
    createBy      String  @default("") //创建者
    createTime    String? // 创建时间
    updateBy      String  @default("") //更新者
    updateTime    String? //更新时间
    remark        String? //备注
}

// 用户
model User {
    id            Int            @id @default(autoincrement())
    uid           String         @unique
    uname         String
    fansNum       Int            @default(0) // 粉丝数
    speakNum      Int            @default(0) //发言数
    fa            String?        @default("/img/avatar.webp") // 头像链接
    sign          String? // 签名
    gender        String? // 性别
    level         String? // 当前等级 0-6级
    jointime      Int            @default(0) // 注册时间
    moral         Int            @default(0) // 节操值
    silence       Int            @default(0) // 封禁状态
    fans_badge    Boolean        @default(false) //是否具有粉丝勋章
    UserEntry     UserEntry[]
    UserFansModal UserFansModal?
    UserLog       UserLog[]
    UserOfficial  UserOfficial?
    UserVip       UserVip?
    Speak         Speak[]
    UserDanmu     UserDanmu[]
    UserCaptain   UserCaptain[]
    UserLike      UserLike[]
    UserGift      UserGift[]
    UserFavor     UserFavor[]
    SendGift      SendGift[]
}

// 用户日志表
model UserLog {
    id      Int    @id @default(autoincrement())
    uid     String // 用户uid
    content String // 日志内容
    roomId  String
    date    String //时间 YYYY-MM-DD HH:mm:ss
    User    User   @relation(fields: [uid], references: [uid])
    Room    Room   @relation(fields: [roomId], references: [roomId])
}

//用户粉丝勋章
model UserFansModal {
    id   Int    @id @default(autoincrement())
    uid  String @unique
    User User   @relation(fields: [uid], references: [uid])
}

model UserOfficial {
    id    Int    @id @default(autoincrement())
    uid   String @unique
    role  Int // 认证类型 0无 1知名up主 2大V达人 3企业 4组织 5媒体 6政府 7高能主播 8未知 9社会知名人士
    title String // 认证信息
    desc  String // 认证备注
    type  Int // 是否认证 -1无 0个人 1机构
    User  User   @relation(fields: [uid], references: [uid])
}

model UserVip {
    id    Int    @id @default(autoincrement())
    uid   String @unique
    type  Int //会员类型 0无1月大会员2年度及以上大会员
    role  Int //大角色类型 1月度大会员 3年度大会员 7十年大会员 15百年大会员
    color String @default("#FB7299")
    User  User   @relation(fields: [uid], references: [uid])
}

// 房间
model Room {
    id             Int           @id @default(autoincrement())
    roomId         String        @unique //房间号
    roomOwnerUid   String //主播uid
    description    String?
    parentAreaName String
    title          String
    userCover      String
    keyframe       String
    tags           String
    areaName       String
    active         Int           @default(0) //直播间状态,是否在直播
    UserEntry      UserEntry[]
    Live           Live[]
    Speak          Speak[]
    RedNotice      RedNotice[]
    UserDanmu      UserDanmu[]
    UserCaptain    UserCaptain[]
    UserLike       UserLike[]
    UserGift       UserGift[]
    UserFavor      UserFavor[]
    UserLog        UserLog[]
    SendGift       SendGift[]
}

// 房间的直播情况
model Live {
    id           Int     @id @default(autoincrement())
    roomId       String //房间号
    title        String? //当次直播标题
    fans         Int     @default(0) //x人看过
    entryNum     Int     @default(0) //进房量
    speakNum     Int     @default(0) //发言数
    likeNum      Int     @default(0) //点赞量
    redNoticeNum Int     @default(0) //红色警告数
    fansClub     Int     @default(0) //粉丝团
    giftNum      Int     @default(0) //礼物数量
    followNum    Int     @default(0) //新增关注
    unfollowNum  Int     @default(0) //取关数
    date         String // 日期 YYYY-MM-DD
    Room         Room    @relation(fields: [roomId], references: [roomId])

    @@unique([roomId, date])
}

// 发言
model Speak {
    id      Int    @id @default(autoincrement())
    uid     String //关联用户uid
    roomId  String //关联直播间
    content String //发言内容
    date    String // 发言时间 YYYY-MM-DD HH:mm:ss
    User    User   @relation(fields: [uid], references: [uid])
    Room    Room   @relation(fields: [roomId], references: [roomId])
}

model Gift {
    id        Int    @id @default(autoincrement())
    giftId    Int    @unique
    giftName  String //礼物名字
    giftPrice Float  @default(0) //礼物价值
}

// 用户送礼
model SendGift {
    id       Int    @id @default(autoincrement())
    uid      String // 关联用户id
    roomId   String // 关联直播间
    giftId   Int
    giftName String //礼物内容
    date     String
    User     User   @relation(fields: [uid], references: [uid])
    Room     Room   @relation(fields: [roomId], references: [roomId])
}

// 红色警告
model RedNotice {
    id           Int    @id @default(autoincrement())
    roomId       String //关联直播间
    redNoticeTag Int // 对应真实事件消息更新中red_notice标志
    date         String // 警告时间 YYYY-MM-DD HH:mm:ss
    Room         Room   @relation(fields: [roomId], references: [roomId])
}

// 用户相对于某直播间进入数据
model UserEntry {
    id     Int     @id @default(autoincrement())
    uid    String
    roomId String
    first  String?
    latest String?
    num    Int     @default(1) //进入直播间次数
    User   User    @relation(fields: [uid], references: [uid])
    Room   Room    @relation(fields: [roomId], references: [roomId])

    @@unique([uid, roomId])
}

// 用户相对于某直播间的弹幕数据
model UserDanmu {
    id      Int     @id @default(autoincrement())
    uid     String
    roomId  String
    first   String? //第一次发送弹幕
    latest  String? //最后一次发送弹幕
    content String? //最后一次弹幕内容
    num     Int     @default(1) //弹幕数量
    User    User    @relation(fields: [uid], references: [uid])
    Room    Room    @relation(fields: [roomId], references: [roomId])

    @@unique([uid, roomId])
}

//用户相对于某直播间的上舰数据
model UserCaptain {
    id     Int     @id @default(autoincrement())
    uid    String
    roomId String
    first  String? //第一次上舰
    latest String? //最后一次上舰
    num    Int     @default(1) //上舰次数
    User   User    @relation(fields: [uid], references: [uid])
    Room   Room    @relation(fields: [roomId], references: [roomId])

    @@unique([uid, roomId])
}

//用户相对于某直播间的点赞
model UserLike {
    id     Int     @id @default(autoincrement())
    uid    String
    roomId String
    first  String? //第一次点赞
    latest String? //最后一次点赞
    num    Int     @default(1) //点赞次数
    User   User    @relation(fields: [uid], references: [uid])
    Room   Room    @relation(fields: [roomId], references: [roomId])

    @@unique([uid, roomId])
}

//用户相对于某直播间的送礼数据
model UserGift {
    id     Int     @id @default(autoincrement())
    uid    String
    roomId String
    first  String? //第一次送礼
    latest String? //最后一次送礼
    num    Int     @default(1) //送礼次数
    User   User    @relation(fields: [uid], references: [uid])
    Room   Room    @relation(fields: [roomId], references: [roomId])

    @@unique([uid, roomId])
}

//用户相对于某直播间好感度
model UserFavor {
    id     Int    @id @default(autoincrement())
    uid    String //用户
    roomId String
    favor  Int    @default(0) //好感度
    User   User   @relation(fields: [uid], references: [uid])
    Room   Room   @relation(fields: [roomId], references: [roomId])

    @@unique([uid, roomId])
}

//配置项
model Options {
    id          Int    @id @default(autoincrement())
    optionName  String @unique
    optionValue String @db.VarChar(255)
}
